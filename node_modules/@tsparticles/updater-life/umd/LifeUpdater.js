(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine", "./Options/Classes/Life.js"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LifeUpdater = void 0;
    const engine_1 = require("@tsparticles/engine");
    const Life_js_1 = require("./Options/Classes/Life.js");
    const noTime = 0, identity = 1, infiniteValue = -1, noLife = 0, minCanvasSize = 0;
    class LifeUpdater {
        constructor(container) {
            this.container = container;
        }
        init(particle) {
            const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;
            if (!lifeOptions) {
                return;
            }
            particle.life = {
                delay: container.retina.reduceFactor
                    ? (((0, engine_1.getRangeValue)(lifeOptions.delay.value) * (lifeOptions.delay.sync ? identity : (0, engine_1.getRandom)())) /
                        container.retina.reduceFactor) *
                        engine_1.millisecondsToSeconds
                    : noTime,
                delayTime: noTime,
                duration: container.retina.reduceFactor
                    ? (((0, engine_1.getRangeValue)(lifeOptions.duration.value) * (lifeOptions.duration.sync ? identity : (0, engine_1.getRandom)())) /
                        container.retina.reduceFactor) *
                        engine_1.millisecondsToSeconds
                    : noTime,
                time: noTime,
                count: lifeOptions.count,
            };
            if (particle.life.duration <= noTime) {
                particle.life.duration = infiniteValue;
            }
            if (particle.life.count <= noTime) {
                particle.life.count = infiniteValue;
            }
            if (particle.life) {
                particle.spawning = particle.life.delay > noTime;
            }
        }
        isEnabled(particle) {
            return !particle.destroyed;
        }
        loadOptions(options, ...sources) {
            if (!options.life) {
                options.life = new Life_js_1.Life();
            }
            for (const source of sources) {
                options.life.load(source?.life);
            }
        }
        update(particle, delta) {
            if (!this.isEnabled(particle) || !particle.life) {
                return;
            }
            const life = particle.life;
            let justSpawned = false;
            if (particle.spawning) {
                life.delayTime += delta.value;
                if (life.delayTime >= particle.life.delay) {
                    justSpawned = true;
                    particle.spawning = false;
                    life.delayTime = noTime;
                    life.time = noTime;
                }
                else {
                    return;
                }
            }
            if (life.duration === infiniteValue) {
                return;
            }
            if (particle.spawning) {
                return;
            }
            if (justSpawned) {
                life.time = noTime;
            }
            else {
                life.time += delta.value;
            }
            if (life.time < life.duration) {
                return;
            }
            life.time = noTime;
            if (particle.life.count > noLife) {
                particle.life.count--;
            }
            if (particle.life.count === noLife) {
                particle.destroy();
                return;
            }
            const canvasSize = this.container.canvas.size, widthRange = (0, engine_1.setRangeValue)(minCanvasSize, canvasSize.width), heightRange = (0, engine_1.setRangeValue)(minCanvasSize, canvasSize.width);
            particle.position.x = (0, engine_1.randomInRange)(widthRange);
            particle.position.y = (0, engine_1.randomInRange)(heightRange);
            particle.spawning = true;
            life.delayTime = noTime;
            life.time = noTime;
            particle.reset();
            const lifeOptions = particle.options.life;
            if (lifeOptions) {
                life.delay = (0, engine_1.getRangeValue)(lifeOptions.delay.value) * engine_1.millisecondsToSeconds;
                life.duration = (0, engine_1.getRangeValue)(lifeOptions.duration.value) * engine_1.millisecondsToSeconds;
            }
        }
    }
    exports.LifeUpdater = LifeUpdater;
});
